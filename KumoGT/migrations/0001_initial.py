# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2020-05-01 17:57
from __future__ import unicode_literals

import KumoGT.crypt_fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import gdstorage.storage


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Annual_Review_Doc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc', KumoGT.crypt_fields.EncryptedFileField(storage=gdstorage.storage.GoogleDriveStorage(), upload_to=b'documents/', verbose_name=b'Document')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name=b'Uploaded at')),
                ('notes', models.CharField(blank=True, max_length=511, verbose_name=b'Notes')),
                ('deg_type', models.CharField(choices=[(b'm_thesis', b'Masters(Thesis)'), (b'm_non_thesis', b'Masters(Non-Thesis)'), (b'phd', b'PhD'), (b'non_degree', b'Non-Degree')], default=b'none', max_length=63, verbose_name=b'Degree')),
                ('doc_type', models.CharField(choices=[(b'not_sel', b'Not Selected'), (b'annual_review', b'Annual Review'), (b'other', b'Other')], default=b'not_sel', max_length=255, verbose_name=b'Document Type')),
                ('year', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MinValueValidator(-32768)], verbose_name=b'Year')),
                ('status', models.CharField(choices=[(b'none', b'----'), (b'sat', b'Satisfied'), (b'need_imp', b'Need Improvement'), (b'unsat', b'Unsatisfied')], default=b'none', max_length=15, verbose_name=b'Status')),
            ],
            options={
                'verbose_name': 'Annual Review',
            },
        ),
        migrations.CreateModel(
            name='Deg_Plan_Doc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc', KumoGT.crypt_fields.EncryptedFileField(storage=gdstorage.storage.GoogleDriveStorage(), upload_to=b'documents/', verbose_name=b'Document')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name=b'Uploaded at')),
                ('notes', models.CharField(blank=True, max_length=511, verbose_name=b'Notes')),
                ('deg_type', models.CharField(choices=[(b'm_thesis', b'Masters(Thesis)'), (b'm_non_thesis', b'Masters(Non-Thesis)'), (b'phd', b'PhD'), (b'non_degree', b'Non-Degree')], default=b'none', max_length=63, verbose_name=b'Degree')),
                ('doc_type', models.CharField(choices=[(b'not_sel', b'Not Selected'), (b'deg_plan', b'Degree Plan'), (b'P_change_commitee', b'Petition for change of committee'), (b'P_course_change', b'Petition for course change'), (b'P_extension_of_time_limits', b'Petition for extension of time limits'), (b'P_waivers_of_exceptions', b'Petition for waivers of exceptions'), (b'mdd', b'MDD'), (b'other', b'Other')], default=b'not_sel', max_length=255, verbose_name=b'Document Type')),
            ],
            options={
                'verbose_name': 'Degree Plan',
            },
        ),
        migrations.CreateModel(
            name='Degree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deg_type', models.CharField(choices=[(b'm_thesis', b'Masters(Thesis)'), (b'm_non_thesis', b'Masters(Non-Thesis)'), (b'phd', b'PhD'), (b'non_degree', b'Non-Degree')], default=b'none', max_length=63, verbose_name=b'Degree')),
                ('major', models.CharField(choices=[(b'cpsc', b'CPSC'), (b'cecn', b'CECN'), (b'en', b'EN'), (b'comp', b'COMP')], max_length=63, verbose_name=b'Major')),
                ('first_reg_year', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MinValueValidator(-32768)], verbose_name=b'First Registered Year')),
                ('first_reg_sem', models.CharField(choices=[(b'fall', b'Fall'), (b'spring', b'Spring'), (b'summer', b'Summer')], default=b'fall', max_length=31, verbose_name=b'First Registered Semester')),
                ('last_reg_year', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MinValueValidator(-32768)], verbose_name=b'Last Registered Year')),
                ('last_reg_sem', models.CharField(choices=[(b'fall', b'Fall'), (b'spring', b'Spring'), (b'summer', b'Summer')], default=b'fall', max_length=31, verbose_name=b'Last Registered Semester')),
                ('deg_recv_year', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MinValueValidator(-32768)], verbose_name=b'Degree Received Year')),
                ('deg_recv_sem', models.CharField(choices=[(b'fall', b'Fall'), (b'spring', b'Spring'), (b'summer', b'Summer')], default=b'fall', max_length=31, verbose_name=b'Degree Received Semester')),
                ('note', models.TextField(blank=True, verbose_name=b'Degree Note')),
            ],
            options={
                'verbose_name': 'Degree',
            },
        ),
        migrations.CreateModel(
            name='Fin_Exam_Doc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc', KumoGT.crypt_fields.EncryptedFileField(storage=gdstorage.storage.GoogleDriveStorage(), upload_to=b'documents/', verbose_name=b'Document')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name=b'Uploaded at')),
                ('notes', models.CharField(blank=True, max_length=511, verbose_name=b'Notes')),
                ('deg_type', models.CharField(choices=[(b'm_thesis', b'Masters(Thesis)'), (b'm_non_thesis', b'Masters(Non-Thesis)'), (b'phd', b'PhD'), (b'non_degree', b'Non-Degree')], default=b'none', max_length=63, verbose_name=b'Degree')),
                ('doc_type', models.CharField(choices=[(b'not_sel', b'Not Selected'), (b'request', b'Request for Final Examination'), (b'req_for_exemp', b'Request for exemption from Final Examination'), (b'report', b'Report of Final Exam')], default=b'not_sel', max_length=255, verbose_name=b'Document Type')),
            ],
            options={
                'verbose_name': 'Final Exam Document',
            },
        ),
        migrations.CreateModel(
            name='Fin_Exam_Info',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name=b'Date')),
                ('time', models.TimeField(verbose_name=b'Time')),
                ('result', models.CharField(choices=[(b'none', b'----'), (b'pass', b'Pass'), (b'fail', b'Fail')], default=b'none', max_length=15, verbose_name=b'Result')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name=b'Title')),
                ('room', models.CharField(blank=True, max_length=255, verbose_name=b'Room')),
                ('abstract', models.CharField(blank=True, max_length=1023, verbose_name=b'Abstract')),
                ('degree', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='KumoGT.Degree', verbose_name=b'Degree')),
            ],
            options={
                'verbose_name': 'Final Exam',
            },
        ),
        migrations.CreateModel(
            name='Other_Doc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc', KumoGT.crypt_fields.EncryptedFileField(storage=gdstorage.storage.GoogleDriveStorage(), upload_to=b'documents/', verbose_name=b'Document')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name=b'Uploaded at')),
                ('notes', models.CharField(blank=True, max_length=511, verbose_name=b'Notes')),
                ('deg_type', models.CharField(choices=[(b'm_thesis', b'Masters(Thesis)'), (b'm_non_thesis', b'Masters(Non-Thesis)'), (b'phd', b'PhD'), (b'non_degree', b'Non-Degree')], default=b'none', max_length=63, verbose_name=b'Degree')),
                ('doc_type', models.CharField(max_length=255, verbose_name=b'Document Type')),
            ],
            options={
                'verbose_name': 'Other Document',
            },
        ),
        migrations.CreateModel(
            name='Pre_Exam_Doc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc', KumoGT.crypt_fields.EncryptedFileField(storage=gdstorage.storage.GoogleDriveStorage(), upload_to=b'documents/', verbose_name=b'Document')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name=b'Uploaded at')),
                ('notes', models.CharField(blank=True, max_length=511, verbose_name=b'Notes')),
                ('deg_type', models.CharField(choices=[(b'm_thesis', b'Masters(Thesis)'), (b'm_non_thesis', b'Masters(Non-Thesis)'), (b'phd', b'PhD'), (b'non_degree', b'Non-Degree')], default=b'none', max_length=63, verbose_name=b'Degree')),
                ('doc_type', models.CharField(choices=[(b'not_sel', b'Not Selected'), (b'checklist', b'Preliminary Exam Checklist'), (b'report', b'Preliminary Exam Report'), (b'written', b'Preliminary Exam Written')], default=b'not_sel', max_length=255, verbose_name=b'Document Type')),
            ],
            options={
                'verbose_name': 'Preliminary Exam Document',
            },
        ),
        migrations.CreateModel(
            name='Pre_Exam_Info',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name=b'Date')),
                ('result', models.CharField(choices=[(b'none', b'----'), (b'pass', b'Pass'), (b'fail', b'Fail')], default=b'none', max_length=15, verbose_name=b'Result')),
                ('degree', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='KumoGT.Degree', verbose_name=b'Degree')),
            ],
            options={
                'verbose_name': 'Preliminary Exam',
            },
        ),
        migrations.CreateModel(
            name='Qual_Exam_Doc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc', KumoGT.crypt_fields.EncryptedFileField(storage=gdstorage.storage.GoogleDriveStorage(), upload_to=b'documents/', verbose_name=b'Document')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name=b'Uploaded at')),
                ('notes', models.CharField(blank=True, max_length=511, verbose_name=b'Notes')),
                ('deg_type', models.CharField(choices=[(b'm_thesis', b'Masters(Thesis)'), (b'm_non_thesis', b'Masters(Non-Thesis)'), (b'phd', b'PhD'), (b'non_degree', b'Non-Degree')], default=b'none', max_length=63, verbose_name=b'Degree')),
                ('doc_type', models.CharField(choices=[(b'not_sel', b'Not Selected'), (b'qual_exam', b'Qualifying Exam'), (b'other', b'Other')], default=b'not_sel', max_length=255, verbose_name=b'Document Type')),
                ('year', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MinValueValidator(-32768)], verbose_name=b'Year')),
                ('sem', models.CharField(choices=[(b'fall', b'Fall'), (b'spring', b'Spring'), (b'summer', b'Summer')], default=b'fall', max_length=31, verbose_name=b'Semester')),
                ('result', models.CharField(choices=[(b'none', b'----'), (b'pass', b'Pass'), (b'fail', b'Fail')], default=b'none', max_length=15, verbose_name=b'Result')),
            ],
            options={
                'verbose_name': 'Qualifying Exam',
            },
        ),
        migrations.CreateModel(
            name='Session_Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name=b'Date')),
                ('note', models.CharField(blank=True, max_length=4096, verbose_name=b'Note')),
            ],
            options={
                'verbose_name': 'Session Note',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uin', models.CharField(max_length=63, unique=True, verbose_name=b'UIN')),
                ('first_name', models.CharField(max_length=127, verbose_name=b'First Name')),
                ('middle_name', models.CharField(blank=True, max_length=127, verbose_name=b'Middle Name')),
                ('last_name', models.CharField(max_length=127, verbose_name=b'Last Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name=b'Email')),
                ('gender', models.CharField(choices=[(b'not_ans', b'Prefer Not to Answer'), (b'male', b'Male'), (b'female', b'Female'), (b'trans', b'Transgender')], default=b'not_ans', max_length=63, verbose_name=b'Gender')),
                ('ethnicity', models.CharField(choices=[(b'unknown', b'Unknown'), (b'african_ame', b'Black/African American'), (b'asian', b'Asian'), (b'white', b'White'), (b'his_or_la', b'Hispanic or Latino'), (b'island', b'Native Hawaiian or Pacific Islander'), (b'international', b'International'), (b'not_ans', b'Prefer Not to Answer')], default=b'unknown', max_length=63, verbose_name=b'Ethnicity')),
                ('us_residency', models.CharField(choices=[(b'usa', b'USA'), (b'usc', b'USC - U.S. Citizen'), (b'usfr', b'USPR - U.S. Permanent Resident'), (b'nra', b'NRA - Non Resident Alien / International'), (b'u', b'U - Unknown')], default=b'u', max_length=63, verbose_name=b'US Residency')),
                ('texas_residency', models.CharField(choices=[(b'r', b'R - Resident'), (b't', b'T - Resident, Not State Funded'), (b'u', b'U - Resident, Not State Funded, 7 Year'), (b'n', b'N - Non-Resident'), (b'p', b'P - Non-Resident, Not State Funded, 7 Year'), (b'i', b'I - International'), (b'k', b'K - International, Not State Funded, 7 Year'), (b'j', b'J - International, Not State Funded'), (b'w', b'W - SB1502, Not State Funded, 7 Year'), (b'v', b'V - SB1520, Not State Funded'), (b'h', b'H - SZASSTD'), (b's', b'S - Unknown')], default=b's', max_length=63, verbose_name=b'Texas Residency')),
                ('citizenship', models.CharField(choices=[(b'AF', b'Afghanistan - Islamic Republic of Afghanistan'), (b'AL', b'Albania - Republic of Albania'), (b'DZ', b"Algeria - People's Democratic Republic of Algeria"), (b'AS', b'American Samoa'), (b'AD', b'Andorra - Principality of Andorra'), (b'AO', b'Angola - Republic of Angola'), (b'AI', b'Anguilla'), (b'AQ', b'Antarctica'), (b'AG', b'Antigua and Barbuda'), (b'AR', b'Argentina - Argentine Republic'), (b'AM', b'Armenia - Republic of Armenia'), (b'AW', b'Aruba'), (b'AU', b'Australia'), (b'AT', b'Austria - Republic of Austria'), (b'AZ', b'Azerbaijan - Republic of Azerbaijan'), (b'BS', b'Bahamas - Commonwealth of the Bahamas'), (b'BH', b'Bahrain - Kingdom of Bahrain'), (b'BD', b"Bangladesh - People's Republic of Bangladesh"), (b'BB', b'Barbados'), (b'BY', b'Belarus - Republic of Belarus'), (b'BE', b'Belgium - Kingdom of Belgium'), (b'BZ', b'Belize'), (b'BJ', b'Benin - Republic of Benin'), (b'BM', b'Bermuda'), (b'BT', b'Bhutan - Kingdom of Bhutan'), (b'BO', b'Bolivia, Plurinational State of - Plurinational State of Bolivia'), (b'BQ', b'Bonaire, Sint Eustatius and Saba - Bonaire, Sint Eustatius and Saba'), (b'BA', b'Bosnia and Herzegovina - Republic of Bosnia and Herzegovina'), (b'BW', b'Botswana - Republic of Botswana'), (b'BV', b'Bouvet Island'), (b'BR', b'Brazil - Federative Republic of Brazil'), (b'IO', b'British Indian Ocean Territory'), (b'BN', b'Brunei Darussalam'), (b'BG', b'Bulgaria - Republic of Bulgaria'), (b'BF', b'Burkina Faso'), (b'BI', b'Burundi - Republic of Burundi'), (b'CV', b'Cabo Verde - Republic of Cabo Verde'), (b'KH', b'Cambodia - Kingdom of Cambodia'), (b'CM', b'Cameroon - Republic of Cameroon'), (b'CA', b'Canada'), (b'KY', b'Cayman Islands'), (b'CF', b'Central African Republic'), (b'TD', b'Chad - Republic of Chad'), (b'CL', b'Chile - Republic of Chile'), (b'CN', b"China - People's Republic of China"), (b'CX', b'Christmas Island'), (b'CC', b'Cocos (Keeling) Islands'), (b'CO', b'Colombia - Republic of Colombia'), (b'KM', b'Comoros - Union of the Comoros'), (b'CG', b'Congo - Republic of the Congo'), (b'CD', b'Congo, The Democratic Republic of the'), (b'CK', b'Cook Islands'), (b'CR', b'Costa Rica - Republic of Costa Rica'), (b'HR', b'Croatia - Republic of Croatia'), (b'CU', b'Cuba - Republic of Cuba'), (b'CW', b'Cura\xc3\xa7ao - Cura\xc3\xa7ao'), (b'CY', b'Cyprus - Republic of Cyprus'), (b'CZ', b'Czechia - Czech Republic'), (b'CI', b"C\xc3\xb4te d'Ivoire - Republic of C\xc3\xb4te d'Ivoire"), (b'DK', b'Denmark - Kingdom of Denmark'), (b'DJ', b'Djibouti - Republic of Djibouti'), (b'DM', b'Dominica - Commonwealth of Dominica'), (b'DO', b'Dominican Republic'), (b'EC', b'Ecuador - Republic of Ecuador'), (b'EG', b'Egypt - Arab Republic of Egypt'), (b'SV', b'El Salvador - Republic of El Salvador'), (b'GQ', b'Equatorial Guinea - Republic of Equatorial Guinea'), (b'ER', b'Eritrea - the State of Eritrea'), (b'EE', b'Estonia - Republic of Estonia'), (b'SZ', b'Eswatini - Kingdom of Eswatini'), (b'ET', b'Ethiopia - Federal Democratic Republic of Ethiopia'), (b'FK', b'Falkland Islands (Malvinas)'), (b'FO', b'Faroe Islands'), (b'FJ', b'Fiji - Republic of Fiji'), (b'FI', b'Finland - Republic of Finland'), (b'FR', b'France - French Republic'), (b'GF', b'French Guiana'), (b'PF', b'French Polynesia'), (b'TF', b'French Southern Territories'), (b'GA', b'Gabon - Gabonese Republic'), (b'GM', b'Gambia - Republic of the Gambia'), (b'GE', b'Georgia'), (b'DE', b'Germany - Federal Republic of Germany'), (b'GH', b'Ghana - Republic of Ghana'), (b'GI', b'Gibraltar'), (b'GR', b'Greece - Hellenic Republic'), (b'GL', b'Greenland'), (b'GD', b'Grenada'), (b'GP', b'Guadeloupe'), (b'GU', b'Guam'), (b'GT', b'Guatemala - Republic of Guatemala'), (b'GG', b'Guernsey'), (b'GN', b'Guinea - Republic of Guinea'), (b'GW', b'Guinea-Bissau - Republic of Guinea-Bissau'), (b'GY', b'Guyana - Republic of Guyana'), (b'HT', b'Haiti - Republic of Haiti'), (b'HM', b'Heard Island and McDonald Islands'), (b'VA', b'Holy See (Vatican City State)'), (b'HN', b'Honduras - Republic of Honduras'), (b'HK', b'Hong Kong - Hong Kong Special Administrative Region of China'), (b'HU', b'Hungary - Hungary'), (b'IS', b'Iceland - Republic of Iceland'), (b'IN', b'India - Republic of India'), (b'ID', b'Indonesia - Republic of Indonesia'), (b'IR', b'Iran, Islamic Republic of - Islamic Republic of Iran'), (b'IQ', b'Iraq - Republic of Iraq'), (b'IE', b'Ireland'), (b'IM', b'Isle of Man'), (b'IL', b'Israel - State of Israel'), (b'IT', b'Italy - Italian Republic'), (b'JM', b'Jamaica'), (b'JP', b'Japan'), (b'JE', b'Jersey'), (b'JO', b'Jordan - Hashemite Kingdom of Jordan'), (b'KZ', b'Kazakhstan - Republic of Kazakhstan'), (b'KE', b'Kenya - Republic of Kenya'), (b'KI', b'Kiribati - Republic of Kiribati'), (b'KP', b"Korea, Democratic People's Republic of - Democratic People's Republic of Korea"), (b'KR', b'Korea, Republic of'), (b'KW', b'Kuwait - State of Kuwait'), (b'KG', b'Kyrgyzstan - Kyrgyz Republic'), (b'LA', b"Lao People's Democratic Republic"), (b'LV', b'Latvia - Republic of Latvia'), (b'LB', b'Lebanon - Lebanese Republic'), (b'LS', b'Lesotho - Kingdom of Lesotho'), (b'LR', b'Liberia - Republic of Liberia'), (b'LY', b'Libya - Libya'), (b'LI', b'Liechtenstein - Principality of Liechtenstein'), (b'LT', b'Lithuania - Republic of Lithuania'), (b'LU', b'Luxembourg - Grand Duchy of Luxembourg'), (b'MO', b'Macao - Macao Special Administrative Region of China'), (b'MG', b'Madagascar - Republic of Madagascar'), (b'MW', b'Malawi - Republic of Malawi'), (b'MY', b'Malaysia'), (b'MV', b'Maldives - Republic of Maldives'), (b'ML', b'Mali - Republic of Mali'), (b'MT', b'Malta - Republic of Malta'), (b'MH', b'Marshall Islands - Republic of the Marshall Islands'), (b'MQ', b'Martinique'), (b'MR', b'Mauritania - Islamic Republic of Mauritania'), (b'MU', b'Mauritius - Republic of Mauritius'), (b'YT', b'Mayotte'), (b'MX', b'Mexico - United Mexican States'), (b'FM', b'Micronesia, Federated States of - Federated States of Micronesia'), (b'MD', b'Moldova, Republic of - Republic of Moldova'), (b'MC', b'Monaco - Principality of Monaco'), (b'MN', b'Mongolia'), (b'ME', b'Montenegro - Montenegro'), (b'MS', b'Montserrat'), (b'MA', b'Morocco - Kingdom of Morocco'), (b'MZ', b'Mozambique - Republic of Mozambique'), (b'MM', b'Myanmar - Republic of Myanmar'), (b'NA', b'Namibia - Republic of Namibia'), (b'NR', b'Nauru - Republic of Nauru'), (b'NP', b'Nepal - Federal Democratic Republic of Nepal'), (b'NL', b'Netherlands - Kingdom of the Netherlands'), (b'NC', b'New Caledonia'), (b'NZ', b'New Zealand'), (b'NI', b'Nicaragua - Republic of Nicaragua'), (b'NE', b'Niger - Republic of the Niger'), (b'NG', b'Nigeria - Federal Republic of Nigeria'), (b'NU', b'Niue - Niue'), (b'NF', b'Norfolk Island'), (b'MK', b'North Macedonia - Republic of North Macedonia'), (b'MP', b'Northern Mariana Islands - Commonwealth of the Northern Mariana Islands'), (b'NO', b'Norway - Kingdom of Norway'), (b'OM', b'Oman - Sultanate of Oman'), (b'PK', b'Pakistan - Islamic Republic of Pakistan'), (b'PW', b'Palau - Republic of Palau'), (b'PS', b'Palestine, State of - the State of Palestine'), (b'PA', b'Panama - Republic of Panama'), (b'PG', b'Papua New Guinea - Independent State of Papua New Guinea'), (b'PY', b'Paraguay - Republic of Paraguay'), (b'PE', b'Peru - Republic of Peru'), (b'PH', b'Philippines - Republic of the Philippines'), (b'PN', b'Pitcairn'), (b'PL', b'Poland - Republic of Poland'), (b'PT', b'Portugal - Portuguese Republic'), (b'PR', b'Puerto Rico'), (b'QA', b'Qatar - State of Qatar'), (b'RO', b'Romania'), (b'RU', b'Russian Federation'), (b'RW', b'Rwanda - Rwandese Republic'), (b'RE', b'R\xc3\xa9union'), (b'BL', b'Saint Barth\xc3\xa9lemy'), (b'SH', b'Saint Helena, Ascension and Tristan da Cunha'), (b'KN', b'Saint Kitts and Nevis'), (b'LC', b'Saint Lucia'), (b'MF', b'Saint Martin (French part)'), (b'PM', b'Saint Pierre and Miquelon'), (b'VC', b'Saint Vincent and the Grenadines'), (b'WS', b'Samoa - Independent State of Samoa'), (b'SM', b'San Marino - Republic of San Marino'), (b'ST', b'Sao Tome and Principe - Democratic Republic of Sao Tome and Principe'), (b'SA', b'Saudi Arabia - Kingdom of Saudi Arabia'), (b'SN', b'Senegal - Republic of Senegal'), (b'RS', b'Serbia - Republic of Serbia'), (b'SC', b'Seychelles - Republic of Seychelles'), (b'SL', b'Sierra Leone - Republic of Sierra Leone'), (b'SG', b'Singapore - Republic of Singapore'), (b'SX', b'Sint Maarten (Dutch part) - Sint Maarten (Dutch part)'), (b'SK', b'Slovakia - Slovak Republic'), (b'SI', b'Slovenia - Republic of Slovenia'), (b'SB', b'Solomon Islands'), (b'SO', b'Somalia - Federal Republic of Somalia'), (b'ZA', b'South Africa - Republic of South Africa'), (b'GS', b'South Georgia and the South Sandwich Islands'), (b'SS', b'South Sudan - Republic of South Sudan'), (b'ES', b'Spain - Kingdom of Spain'), (b'LK', b'Sri Lanka - Democratic Socialist Republic of Sri Lanka'), (b'SD', b'Sudan - Republic of the Sudan'), (b'SR', b'Suriname - Republic of Suriname'), (b'SJ', b'Svalbard and Jan Mayen'), (b'SE', b'Sweden - Kingdom of Sweden'), (b'CH', b'Switzerland - Swiss Confederation'), (b'SY', b'Syrian Arab Republic'), (b'TW', b'Taiwan, Province of China - Taiwan, Province of China'), (b'TJ', b'Tajikistan - Republic of Tajikistan'), (b'TZ', b'Tanzania, United Republic of - United Republic of Tanzania'), (b'TH', b'Thailand - Kingdom of Thailand'), (b'TL', b'Timor-Leste - Democratic Republic of Timor-Leste'), (b'TG', b'Togo - Togolese Republic'), (b'TK', b'Tokelau'), (b'TO', b'Tonga - Kingdom of Tonga'), (b'TT', b'Trinidad and Tobago - Republic of Trinidad and Tobago'), (b'TN', b'Tunisia - Republic of Tunisia'), (b'TR', b'Turkey - Republic of Turkey'), (b'TM', b'Turkmenistan'), (b'TC', b'Turks and Caicos Islands'), (b'TV', b'Tuvalu'), (b'UG', b'Uganda - Republic of Uganda'), (b'UA', b'Ukraine'), (b'AE', b'United Arab Emirates'), (b'GB', b'United Kingdom - United Kingdom of Great Britain and Northern Ireland'), (b'US', b'United States - United States of America'), (b'UM', b'United States Minor Outlying Islands'), (b'UY', b'Uruguay - Eastern Republic of Uruguay'), (b'UZ', b'Uzbekistan - Republic of Uzbekistan'), (b'VU', b'Vanuatu - Republic of Vanuatu'), (b'VE', b'Venezuela, Bolivarian Republic of - Bolivarian Republic of Venezuela'), (b'VN', b'Viet Nam - Socialist Republic of Viet Nam'), (b'VG', b'Virgin Islands, British - British Virgin Islands'), (b'VI', b'Virgin Islands, U.S. - Virgin Islands of the United States'), (b'WF', b'Wallis and Futuna'), (b'EH', b'Western Sahara'), (b'YE', b'Yemen - Republic of Yemen'), (b'ZM', b'Zambia - Republic of Zambia'), (b'ZW', b'Zimbabwe - Republic of Zimbabwe'), (b'AX', b'\xc3\x85land Islands')], max_length=127, verbose_name=b'Citizenship')),
                ('status', models.CharField(choices=[(b'current', b'Current'), (b'graduated', b'Gradudated'), (b'invalid', b'Invalid')], default=b'current', max_length=63, verbose_name=b'Status')),
                ('start_year', models.SmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MinValueValidator(-32768)], verbose_name=b'Start Year')),
                ('start_sem', models.CharField(choices=[(b'fall', b'Fall'), (b'spring', b'Spring'), (b'summer', b'Summer')], default=b'fall', max_length=31, verbose_name=b'Start Semester')),
                ('advisor', models.CharField(blank=True, max_length=511, verbose_name=b'Advisor')),
                ('upe', models.CharField(choices=[(b'yes', b'Yes'), (b'no', b'No')], default=b'no', max_length=15, verbose_name=b'UPE')),
                ('ace', models.CharField(choices=[(b'yes', b'Yes'), (b'no', b'No')], default=b'no', max_length=15, verbose_name=b'ACE')),
                ('iga', models.CharField(choices=[(b'yes', b'Yes'), (b'no', b'No')], default=b'no', max_length=15, verbose_name=b'IGA')),
                ('propos_date', models.CharField(max_length=30, null=True, verbose_name=b'Proposal Date')),
                ('cur_degree', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='KumoGT.Degree', verbose_name=b'Current Degree')),
            ],
            options={
                'verbose_name': 'Student',
            },
        ),
        migrations.CreateModel(
            name='T_D_Doc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc', KumoGT.crypt_fields.EncryptedFileField(storage=gdstorage.storage.GoogleDriveStorage(), upload_to=b'documents/', verbose_name=b'Document')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name=b'Uploaded at')),
                ('notes', models.CharField(blank=True, max_length=511, verbose_name=b'Notes')),
                ('deg_type', models.CharField(choices=[(b'm_thesis', b'Masters(Thesis)'), (b'm_non_thesis', b'Masters(Non-Thesis)'), (b'phd', b'PhD'), (b'non_degree', b'Non-Degree')], default=b'none', max_length=63, verbose_name=b'Degree')),
                ('doc_type', models.CharField(choices=[(b'not_sel', b'Not Selected'), (b'approval', b'Thesis/Dissertation Approval Page'), (b't_d', b'Thesis/Dissertation')], default=b'not_sel', max_length=255, verbose_name=b'Document Type')),
            ],
            options={
                'verbose_name': 'Thesis/Dissertation Document',
            },
        ),
        migrations.CreateModel(
            name='T_D_Info',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name=b'Title')),
                ('url', models.URLField(verbose_name=b'URL')),
                ('degree', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='KumoGT.Degree', verbose_name=b'Degree')),
            ],
            options={
                'verbose_name': 'Thesis/Dissertation',
            },
        ),
        migrations.CreateModel(
            name='T_D_Prop_Doc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc', KumoGT.crypt_fields.EncryptedFileField(storage=gdstorage.storage.GoogleDriveStorage(), upload_to=b'documents/', verbose_name=b'Document')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name=b'Uploaded at')),
                ('notes', models.CharField(blank=True, max_length=511, verbose_name=b'Notes')),
                ('deg_type', models.CharField(choices=[(b'm_thesis', b'Masters(Thesis)'), (b'm_non_thesis', b'Masters(Non-Thesis)'), (b'phd', b'PhD'), (b'non_degree', b'Non-Degree')], default=b'none', max_length=63, verbose_name=b'Degree')),
                ('doc_type', models.CharField(choices=[(b'not_sel', b'Not Selected'), (b'title_page', b'Thesis/Dissertation Proposal Title Page'), (b'prop', b'Thesis/Dissertation Proposal')], default=b'not_sel', max_length=255, verbose_name=b'Document Type')),
            ],
            options={
                'verbose_name': 'Thesis/Dissertation Proposal Document',
            },
        ),
        migrations.AddField(
            model_name='session_note',
            name='stu',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='KumoGT.Student', verbose_name=b'Student'),
        ),
        migrations.AddField(
            model_name='degree',
            name='stu',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='degrees', to='KumoGT.Student', verbose_name=b'Student'),
        ),
        migrations.AddField(
            model_name='deg_plan_doc',
            name='stu',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deg_plan_docs', to='KumoGT.Student', verbose_name=b'Student'),
        ),
    ]
